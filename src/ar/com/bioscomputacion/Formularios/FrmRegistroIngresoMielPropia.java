/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.bioscomputacion.Formularios;

import ar.com.bioscomputacion.Funciones.ConexionBD;
import ar.com.bioscomputacion.Funciones.CtaCteProductor;
import ar.com.bioscomputacion.Funciones.IngresoMielPropia;
import ar.com.bioscomputacion.Funciones.ItemIngresadoIngresoMiel;
import ar.com.bioscomputacion.Funciones.Locacion;
import ar.com.bioscomputacion.Funciones.StockRealMiel;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Caco
 */
public class FrmRegistroIngresoMielPropia extends javax.swing.JInternalFrame {

    public int codigoIngreso, codigoItemIngresado;
    public Double totalMielIngresada;
    public List<ItemIngresadoIngresoMiel> itemsAIngresar = new ArrayList<>();
    public List<Locacion> listaLocaciones = new ArrayList<>();
    
    //a medida que se seleccionan locaciones en los combos en estas variables se almacenan sus codigos
    //para luego usarlos a la hora de registrar el traslado
    int codigoLocacion;

    int fila = -1;
    int filaItemsFinanciados = -1;
    
    ConexionBD mysql = new ConexionBD();
    Connection cn = mysql.getConexionBD();
    /**
     * Creates new form FrmGenerico
     */
    public FrmRegistroIngresoMielPropia() throws SQLException {
        
        initComponents();
        listarItemsIngresados();
        //ocultarColumnasItemsFinanciados();
        inicializar();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void limpiarCampos(){

        //tfNumeroComprobante.setText("");
        Calendar cal = new GregorianCalendar();
        dcFechaIngreso.setCalendar(cal);
        cbDescripcionItem.setSelectedIndex(0);
        tfCantidadItemIngresado.setText("");
        cbLocacionesDisponibles.setSelectedIndex(0);
        
        itemsAIngresar.clear();
        listarItemsIngresados();
        
    }
    
    public void inicializar() throws SQLException{
        
        Calendar cal = new GregorianCalendar();
        dcFechaIngreso.setCalendar(cal);
        
        int d, m, a;
        cal = dcFechaIngreso.getCalendar();
        //FECHA DEL CREDITO
        d = cal.get(Calendar.DAY_OF_MONTH);
        m = cal.get(Calendar.MONTH);
        a = cal.get(Calendar.YEAR) - 1900;

        IngresoMielPropia ingresoMiel = new IngresoMielPropia("-", new Date(a, m, d), 0.00);
        ingresoMiel.registrarIngresoMielPropia(ingresoMiel);
        //almaceno en la variable global codigoCredito el codigo del nuevo credito a registrar
        
        //aca almaceno el codigo del credito recien cargado para utilizar el mismo para los items
        //y para ubicarlo en caso de tener que eliminarlo
        codigoIngreso = ingresoMiel.mostrarIdIngresoMielPropia();
        
        //almaceno el codigo del primer item que se vinculara al credito
        codigoItemIngresado = ingresoMiel.mostrarIdItemAIngresar(codigoIngreso)+1;
        
        //inicializo variable que almacena la cantidad de miel financiada en el credito que se va a registrar
        totalMielIngresada = 0.00;
        
        //campo con el numero del presupuesto, no se debe poder editar
        tfNumeroComprobante.setText(String.valueOf(codigoIngreso));
        tfNumeroComprobante.setEditable(false);
        
        //carga del combo de las locaciones disponibles y almacena en la lista las mismas, con codigo y nombre
        //para tener acceso facilmente al codigo de la locacion, segun el nombre seleccionado en el combo
        //para eso, vamos a usar la lista "locaciones", que es un arreglo de objetos del tipo locacion
        
        listaLocaciones = cargarListaLocaciones();
        
        for (int i = 0; i<listaLocaciones.size(); i++){
            
            cbLocacionesDisponibles.addItem(listaLocaciones.get(i).getNombre_locacion());
            
        }
        
        dcFechaIngreso.requestFocus();
        
    }

    public void ocultarColumnasItemsIngresados() {

        DefaultTableCellRenderer cellRender1 = new DefaultTableCellRenderer();
        DefaultTableCellRenderer cellRender2 = new DefaultTableCellRenderer();
        
        cellRender1.setHorizontalAlignment(SwingConstants.LEFT);
        tItemsIngresados.getColumnModel().getColumn(0).setCellRenderer(cellRender1);   
        cellRender2.setHorizontalAlignment(SwingConstants.RIGHT);
        tItemsIngresados.getColumnModel().getColumn(1).setCellRenderer(cellRender2);   
        
        ((DefaultTableCellRenderer) tItemsIngresados.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        
    }

    public ArrayList<Locacion> cargarListaLocaciones() throws SQLException{
        
        ArrayList<Locacion> locaciones = new ArrayList<Locacion>();
        Locacion loc0 = new Locacion();
        loc0.setCodigo_locacion(-1);
        loc0.setNombre_locacion("SELECCIONAR");
        locaciones.add(loc0);
        
        Statement st = cn.createStatement();
        ResultSet rs = st.executeQuery("select codigo_locacion, nombre_locacion from locacion order by codigo_locacion asc");
        
        try{
            
            int i = 0;
            while(rs.next()){
                
                int codigoLocacion = rs.getInt("codigo_locacion");
                String nombreLocacion = rs.getString("nombre_locacion");
                Locacion loc = new Locacion();
                loc.setCodigo_locacion(codigoLocacion);
                loc.setNombre_locacion(nombreLocacion);
                locaciones.add(loc);
                i++;

                
            }
            
        }
        catch (Exception e) {
            
            JOptionPane.showConfirmDialog(null, e);
            return null;
            
        }
        
        return locaciones;
        
    }
    
    public ArrayList<String> cargarComboLocaciones() throws SQLException{
        
        ArrayList<String> locaciones = new ArrayList<String>();
        
        //el primer item debe ser "SELECCIONAR"
        locaciones.add("SELECCIONAR");
        
        Statement st = cn.createStatement();
        ResultSet rs = st.executeQuery("select nombre_locacion from locacion");
        
        try{
            
            while(rs.next()){
                
                locaciones.add(rs.getString("nombre_locacion"));
                
            }
            
        }
        catch (Exception e) {
            
            JOptionPane.showConfirmDialog(null, e);
            return null;
            
        }
        
        return locaciones;
        
    }

    private void listarItemsIngresados() {

        DefaultTableModel modelo = new DefaultTableModel(new String[]{"DESCRIPCION","CANTIDAD"},itemsAIngresar.size());
        tItemsIngresados.setModel(modelo);
        TableModel modeloDatos = tItemsIngresados.getModel();
        
        for (int i = 0; i<itemsAIngresar.size(); i++ ){
            
            ItemIngresadoIngresoMiel item = itemsAIngresar.get(i);
            modeloDatos.setValueAt(item.getDescripcionItemIngresado(), i, 0);
            modeloDatos.setValueAt(item.getCantidadItemIngresado(), i, 1);
            
        }
        
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSPanelShadow1 = new rojeru_san.RSPanelShadow();
        jPanel1 = new javax.swing.JPanel();
        rSPanelShadow2 = new rojeru_san.RSPanelShadow();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel17 = new javax.swing.JLabel();
        tfNumeroComprobante = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        dcFechaIngreso = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        cbDescripcionItem = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        tfCantidadItemIngresado = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        tItemsIngresados = tItemsIngresados = tItemsIngresados = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        rdbrRegistrar1 = new rojeru_san.RSButtonRiple();
        rdbrRegistrar2 = new rojeru_san.RSButtonRiple();
        jLabel21 = new javax.swing.JLabel();
        cbLocacionesDisponibles = new javax.swing.JComboBox<>();
        rdbrRegistrar = new rojeru_san.RSButtonRiple();
        rsbrCancelar = new rojeru_san.RSButtonRiple();

        setTitle("REGISTRO DE INGRESO DE MIEL PROPIA - CAM HONEY BROTHERS");

        jPanel1.setBackground(new java.awt.Color(51, 84, 111));

        rSPanelShadow2.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("INGRESE LA INFORMACION DE LA FACTURA:");

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("INGRESO N°:");

        tfNumeroComprobante.setBackground(new java.awt.Color(51, 84, 111));
        tfNumeroComprobante.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tfNumeroComprobante.setForeground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("FECHA DEL INGRESO:");
        jLabel6.setToolTipText("");

        dcFechaIngreso.setBackground(new java.awt.Color(36, 33, 33));
        dcFechaIngreso.setForeground(new java.awt.Color(207, 207, 207));
        dcFechaIngreso.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("ITEMS INGRESADOS:");

        jSeparator4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("DESCRIPCION:");

        cbDescripcionItem.setBackground(new java.awt.Color(36, 33, 33));
        cbDescripcionItem.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        cbDescripcionItem.setForeground(new java.awt.Color(207, 207, 207));
        cbDescripcionItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR", "KG. DE MIEL", "TAMBOR DE MIEL X 300 KGS.", "LOTE DE MIEL X 70 TAMBORES", "LOTE DE MIEL X 71 TAMBORES", " " }));
        cbDescripcionItem.setPreferredSize(new java.awt.Dimension(136, 19));
        cbDescripcionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDescripcionItemActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("CANTIDAD:");

        tfCantidadItemIngresado.setBackground(new java.awt.Color(51, 84, 111));
        tfCantidadItemIngresado.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tfCantidadItemIngresado.setForeground(new java.awt.Color(255, 255, 255));

        tItemsIngresados.setBackground(new java.awt.Color(153, 255, 255));
        tItemsIngresados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DESCRIPCION", "CANTIDAD", "IMPORTE", "SUB TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tItemsIngresados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tItemsIngresadostItemsFacturadosFacturaMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tItemsIngresados);

        rdbrRegistrar1.setBackground(new java.awt.Color(0, 0, 0));
        rdbrRegistrar1.setForeground(new java.awt.Color(0, 0, 0));
        rdbrRegistrar1.setText("INGRESAR");
        rdbrRegistrar1.setFont(new java.awt.Font("Roboto Bold", 3, 12)); // NOI18N
        rdbrRegistrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbrRegistrar1ActionPerformed(evt);
            }
        });

        rdbrRegistrar2.setBackground(new java.awt.Color(0, 0, 0));
        rdbrRegistrar2.setForeground(new java.awt.Color(0, 0, 0));
        rdbrRegistrar2.setText("QUITAR");
        rdbrRegistrar2.setToolTipText("");
        rdbrRegistrar2.setFont(new java.awt.Font("Roboto Bold", 3, 12)); // NOI18N
        rdbrRegistrar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbrRegistrar2ActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("SELECCIONE LA LOCACION DONDE SERA ACOPIADA LA MIEL ADQUIRIDA:");

        cbLocacionesDisponibles.setBackground(new java.awt.Color(36, 33, 33));
        cbLocacionesDisponibles.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        cbLocacionesDisponibles.setForeground(new java.awt.Color(207, 207, 207));
        cbLocacionesDisponibles.setPreferredSize(new java.awt.Dimension(136, 19));
        cbLocacionesDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLocacionesDisponiblesActionPerformed(evt);
            }
        });

        rdbrRegistrar.setBackground(new java.awt.Color(47, 110, 164));
        rdbrRegistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ar/com/bioscomputacion/Iconos/editar.png"))); // NOI18N
        rdbrRegistrar.setText("REGISTRAR INGRESO");
        rdbrRegistrar.setFont(new java.awt.Font("Roboto Bold", 3, 14)); // NOI18N
        rdbrRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbrRegistrarActionPerformed(evt);
            }
        });

        rsbrCancelar.setBackground(new java.awt.Color(47, 110, 164));
        rsbrCancelar.setText("SALIR");
        rsbrCancelar.setFont(new java.awt.Font("Roboto Bold", 3, 14)); // NOI18N
        rsbrCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rsbrCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rSPanelShadow2Layout = new javax.swing.GroupLayout(rSPanelShadow2);
        rSPanelShadow2.setLayout(rSPanelShadow2Layout);
        rSPanelShadow2Layout.setHorizontalGroup(
            rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelShadow2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(122, 122, 122))
                            .addComponent(jSeparator2)
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(tfNumeroComprobante))
                                .addGap(18, 18, 18)
                                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dcFechaIngreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6))
                                .addGap(167, 167, 167))
                            .addComponent(jSeparator4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelShadow2Layout.createSequentialGroup()
                                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbDescripcionItem, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(tfCantidadItemIngresado)))
                            .addComponent(jScrollPane7)
                            .addComponent(cbLocacionesDisponibles, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel21)
                                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                        .addComponent(rdbrRegistrar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(rdbrRegistrar2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel7))
                                .addGap(158, 158, 158))))
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rdbrRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rsbrCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        rSPanelShadow2Layout.setVerticalGroup(
            rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(7, 7, 7)
                        .addComponent(dcFechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addGap(7, 7, 7)
                        .addComponent(tfNumeroComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCantidadItemIngresado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDescripcionItem, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbrRegistrar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbrRegistrar2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLocacionesDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbrRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rsbrCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelShadow2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelShadow2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbDescripcionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDescripcionItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbDescripcionItemActionPerformed

    private void tItemsIngresadostItemsFacturadosFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tItemsIngresadostItemsFacturadosFacturaMouseClicked

        filaItemsFinanciados = tItemsIngresados.rowAtPoint(evt.getPoint());
        
    }//GEN-LAST:event_tItemsIngresadostItemsFacturadosFacturaMouseClicked

    private void rdbrRegistrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbrRegistrar1ActionPerformed

        //chequeo de datos completos
        if (String.valueOf(cbDescripcionItem.getSelectedItem()) == "SELECCIONAR"){

            JOptionPane.showMessageDialog(null, "Se debe seleccionar la descripcion del item a ingresar.", "INGRESO DE ITEMS", JOptionPane.ERROR_MESSAGE);
            cbDescripcionItem.requestFocus();
            return;

        }

        if (tfCantidadItemIngresado.getText().length() == 0) {

            JOptionPane.showMessageDialog(null, "Se debe ingresar la cantidad correspondiente a ingresar.", "INGRESO DE ITEMS", JOptionPane.ERROR_MESSAGE);
            tfCantidadItemIngresado.requestFocus();
            return;

        }

        if (Integer.parseInt(tfCantidadItemIngresado.getText().toString()) == 0) {

            JOptionPane.showMessageDialog(null, "No se puede ingresar un item con cantidad menor a una unidad.", "INGRESO DE ITEMS", JOptionPane.ERROR_MESSAGE);
            tfCantidadItemIngresado.requestFocus();
            return;

        }

        String descripcionItemIngresado = String.valueOf(cbDescripcionItem.getSelectedItem());

        Double cantidadItemIngresado = 0.00;

        switch (descripcionItemIngresado){

            case "KG. DE MIEL":
            //se suman los kilos sin convertirlos
            cantidadItemIngresado = Double.parseDouble(tfCantidadItemIngresado.getText().toString());
            break;

            case "TAMBOR DE MIEL X 300 KGS.":
            //se suman los kilos sin convertirlos
            cantidadItemIngresado = Double.parseDouble(tfCantidadItemIngresado.getText().toString())*300.00;
            break;

            case "LOTE DE MIEL X 70 TAMBORES":
            //se suman los kilos sin convertirlos
            cantidadItemIngresado = Double.parseDouble(tfCantidadItemIngresado.getText().toString())*21000.00;
            break;

            case "LOTE DE MIEL X 71 TAMBORES":
            //se suman los kilos sin convertirlos
            cantidadItemIngresado = Double.parseDouble(tfCantidadItemIngresado.getText().toString())*21300.00;
            break;

        }

        ItemIngresadoIngresoMiel itemIngresado = new ItemIngresadoIngresoMiel(codigoItemIngresado, codigoIngreso, descripcionItemIngresado, cantidadItemIngresado);

        //lo agrego a la lista que luego sera recorrida para almacenar uno por uno los items facturados en la bd
        itemsAIngresar.add(itemIngresado);
        System.out.println(itemsAIngresar.size());

        //se suma la cantidad de kgs. de miel a la variable totalMielFinanciada
        totalMielIngresada = totalMielIngresada+cantidadItemIngresado;

        //lo agrego a la tabla
        listarItemsIngresados();
        ocultarColumnasItemsIngresados();

        //limpio los campos
        cbDescripcionItem.setSelectedIndex(0);
        tfCantidadItemIngresado.setText("");
        cbDescripcionItem.requestFocus();

        //incremento el codigo de item facturado para un potencial proximo item facturado
        codigoItemIngresado = codigoItemIngresado+1;
        
    }//GEN-LAST:event_rdbrRegistrar1ActionPerformed

    private void rdbrRegistrar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbrRegistrar2ActionPerformed

        //tengo que quitar le item facturado de la lista de items a facturar
        //los cuales aun no se han dado de alta en la BD sino que aguardan
        //en dicha lista para luego ser recorridos y dados todos de alta
        //hay que eliminar el item de la lista de items a facturar y de la grilla que los muestra
        //mientras tanto

        if (filaItemsFinanciados == -1){

            JOptionPane.showMessageDialog(null, "Por favor seleccione el item a desvincular del ingreso de miel propia.", "DESVINCULACION DE ITEM INGRESADO", JOptionPane.INFORMATION_MESSAGE);

        }
        else{

            if (itemsAIngresar.size()>0){

                //primero obtengo la cantidad de miel del item a punto de desvincularse del credito
                ItemIngresadoIngresoMiel item = itemsAIngresar.get(filaItemsFinanciados);
                Double cantidadItemIngresado = item.getCantidadItemIngresado();

                //lo elimino de la lista que luego sera recorrida para almacenar uno por uno los items facturados en la bd
                itemsAIngresar.remove(filaItemsFinanciados);

                //se resta la cantidad de kgs. de miel del item removido a la variable totalMielFinanciada
                totalMielIngresada = totalMielIngresada-cantidadItemIngresado;

                //lo quito de la tabla
                listarItemsIngresados();
                ocultarColumnasItemsIngresados();
                JOptionPane.showMessageDialog(null, "El item ingresado ha sido desvinculado con exito del ingreso de miel propia.", "DESVINCULACION DE ITEM INGRESADO", JOptionPane.INFORMATION_MESSAGE);

            }
            else{

                JOptionPane.showMessageDialog(null, "No existen items financiados para poder desvincular.", "DESVINCULACION DE ITEM INGRESADO", JOptionPane.INFORMATION_MESSAGE);

            }

            cbDescripcionItem.requestFocus();

        }
    }//GEN-LAST:event_rdbrRegistrar2ActionPerformed

    private void cbLocacionesDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLocacionesDisponiblesActionPerformed

        // cada vez que selecciona un nombre de locacion, se busca su codigo de locacion en la lista de locaciones
        // y se almacena dicho codigo en la variable correspondiente

        if (cbLocacionesDisponibles.getSelectedIndex() != 0){

            //si es cero no se debe hacer nada, ya que es el item "SELECCIONAR"
            //caso contrario busco el codigo asociado al nombre seleccionado
            codigoLocacion = listaLocaciones.get(cbLocacionesDisponibles.getSelectedIndex()).getCodigo_locacion();

        }

    }//GEN-LAST:event_cbLocacionesDisponiblesActionPerformed

    private void rdbrRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbrRegistrarActionPerformed

        //Tambien son obligatorios todos los campos referidos al ingresoa: numero de ingreso, fecha
        //items ingresados y locacion de deposito de la miel

        //VER COMO SE CONTROLA QUE SE HAYA INGRESADO AL MENOS UN ITEM AL CREDITOOO!!!
        Boolean informacionIngreso = (cbLocacionesDisponibles.getSelectedItem() == "SELECCIONAR" || itemsAIngresar.size()==0);

        //chequea informacion del ingreso, la cual es obligatoria para poder registrar el mismo
        if (informacionIngreso) {

            JOptionPane.showMessageDialog(null, "La informacion correspondiente al ingreso se halla incompleta. Por favor ingresela correctamente.", "REGISTRO DE INGRESO DE MIEL PROPIA", JOptionPane.ERROR_MESSAGE);
            dcFechaIngreso.requestFocus();
            return;

        }
        
        //obtengo las fechas de ingreso
        Calendar cal1, cal2;
        int d1, d2, m1, m2, a1, a2;
        cal1 = dcFechaIngreso.getCalendar();
        //ffecha de la factura
        d1 = cal1.get(Calendar.DAY_OF_MONTH);
        m1 = cal1.get(Calendar.MONTH);
        a1 = cal1.get(Calendar.YEAR) - 1900;

        //se procede al registro del ingresode miel
        //que en realidad es un update del ingreso ya ingresado al inicializarse este formulario!
        IngresoMielPropia ingreso = new IngresoMielPropia(tfNumeroComprobante.getText(), new Date(a1, m1, d1), totalMielIngresada);

        if (ingreso.modificarIngresoMielPropia(ingreso, codigoIngreso)){

            //ahora, se guardan todos los items ingresados en dicho ingreso (crar el metodo)

            for (int i = 0; i<itemsAIngresar.size(); i++ ){

                System.out.println(i);
                ItemIngresadoIngresoMiel item = itemsAIngresar.get(i);
                item.ingresarItem(item);

            }

            //SE DEBE ADEMAS ALTERAR EL STOCK DE MIEL, SUMANDO LA CANTIDAD DE KGS. COMPRADA EN ESTE INGRESO
            // A DICHO STOCK, APUNTANDO ADEMAS EL ESTADO DE ESTA CANTIDAD A PAGOS.

            StockRealMiel stockMiel = new StockRealMiel();
            stockMiel.setFecha_movimiento(new Date(a1, m1, d1));
            stockMiel.setTipo_movimiento("INGRESO");
            stockMiel.setComprobante_asociado("INGRESO");
            stockMiel.setId_comprobante_asociado(codigoIngreso);
            stockMiel.setNumero_comprobante_asociado(tfNumeroComprobante.getText());
            //crear metodo para realizar esto:
            //en una variable deberia sumar todos los kilos de miel ingresados, los cuales se pueden sacar
            //de las descripciones y cantidades de los items ingresados (en la lista esta esa informacion!)
            //esa cantidad obtenida se almacenara en cantidad_miel
            stockMiel.setCantidad_miel(totalMielIngresada);
            //el codigo de la locacion donde se almacenara la miel ingresada es un foreign key, si no existe
            //no se almacenara nada!
            //debo obtener el codigo de la locacion a partir del nombre de la misma
            //escogido en el combo de locaciones disponibles

            stockMiel.setLocacion_miel(codigoLocacion);

            //se asigna a la compra el valor: FACTURADA, ya que es un ingreso de miel propia.
            stockMiel.setEstado_compra("FACTURADA");

            stockMiel.registrarMovimientoStock(stockMiel);

            JOptionPane.showMessageDialog(null, "El ingreso ha sido registrado exitosamente.","REGISTRO DE INGRESO DE MIEL PROPIA", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();

        }
        else{

            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar el ingreso.","REGISTRO DE INGRESO DE MIEL PROPIA", JOptionPane.ERROR_MESSAGE);

        }

        this.dispose();
        
    }//GEN-LAST:event_rdbrRegistrarActionPerformed

    private void rsbrCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rsbrCancelarActionPerformed

        JOptionPane.showMessageDialog(null, "Esta a punto de cerrar el formulario. Se perderan los cambios no guardados.", "REGISTRO DE INGRESO DE MIEL PROPIA", JOptionPane.INFORMATION_MESSAGE);
        IngresoMielPropia ingreso = new IngresoMielPropia();
        ingreso.eliminarIngresoMielPropia(codigoIngreso);
        this.dispose();

    }//GEN-LAST:event_rsbrCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox<String> cbDescripcionItem;
    public javax.swing.JComboBox<String> cbLocacionesDisponibles;
    public com.toedter.calendar.JDateChooser dcFechaIngreso;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private rojeru_san.RSPanelShadow rSPanelShadow1;
    private rojeru_san.RSPanelShadow rSPanelShadow2;
    private rojeru_san.RSButtonRiple rdbrRegistrar;
    private rojeru_san.RSButtonRiple rdbrRegistrar1;
    private rojeru_san.RSButtonRiple rdbrRegistrar2;
    private rojeru_san.RSButtonRiple rsbrCancelar;
    public javax.swing.JTable tItemsIngresados;
    public javax.swing.JTextField tfCantidadItemIngresado;
    public javax.swing.JTextField tfNumeroComprobante;
    // End of variables declaration//GEN-END:variables
}
