/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.bioscomputacion.Formularios;

import ar.com.bioscomputacion.Funciones.AjusteCompensacionStock;
import ar.com.bioscomputacion.Funciones.AnulacionComprobanteProductor;
import ar.com.bioscomputacion.Funciones.ComprobantesAcreditacionComprobantesAfectadosProductor;
import ar.com.bioscomputacion.Funciones.ComprobantesRelacionadosCompraConsignacion;
import ar.com.bioscomputacion.Funciones.CreditoPresupuestoProductor;
import ar.com.bioscomputacion.Funciones.ConexionBD;
import ar.com.bioscomputacion.Funciones.CreditoPresupuestoCliente;
import ar.com.bioscomputacion.Funciones.CreditoProductor;
import ar.com.bioscomputacion.Funciones.CtaCteProductor;
import ar.com.bioscomputacion.Funciones.DevolucionProductor;
import ar.com.bioscomputacion.Funciones.FacturaCliente;
import ar.com.bioscomputacion.Funciones.FacturaProductor;
import ar.com.bioscomputacion.Funciones.IngresoMielPropia;
import ar.com.bioscomputacion.Funciones.Locacion;
import ar.com.bioscomputacion.Funciones.NotaCreditoCliente;
import ar.com.bioscomputacion.Funciones.NotaCreditoProductor;
import ar.com.bioscomputacion.Funciones.PagoCliente;
import ar.com.bioscomputacion.Funciones.PagoProductor;
import ar.com.bioscomputacion.Funciones.PresupuestoCliente;
import ar.com.bioscomputacion.Funciones.PresupuestoProductor;
import ar.com.bioscomputacion.Funciones.StockRealMiel;
import ar.com.bioscomputacion.Funciones.Traslado;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import javax.swing.JOptionPane;

/**
 *
 * @author Caco
 */
public class FrmRegistroAnulacionComprobanteProductor extends javax.swing.JInternalFrame {

    public int codigoAnulacion, codigoComprobanteAnulado, codigoLocacion, codigoProductor, codigoMovimientoCtaCte, codigoMovimientoCtaCteComprobanteAfectado, codigoMovimientoCtaCteComprobanteAfectadoCredito;
    public String tipoComprobanteAnulado, numeroComprobanteAnulado, bandera;
    public Date fechaAnulacion, fechaComprobanteAnulado;
    public Double importeDineroAnulado, cantidadMielAnulada;
    
    /**
     * Creates new form FrmGenerico
     */
    public FrmRegistroAnulacionComprobanteProductor() {
        
        initComponents();
        inicializar();
        
    }

    
    
    public void inicializar(){
        
        /*
        SELECCIONAR
        FACTURAS A
        FACTURAS C
        FACTURAS E
        PRESUPUESTOS DE PRODUCTORES
        PRESUPUESTOS A CLIENTES
        CONSIGNACIONES
        INGRESOS
        FACTURACIONES DE CONSIGNACIONES
        PAGOS A PRODUCTORES
        PAGOS DE CLIENTES
        NOTAS DE CREDITO A
        NOTAS DE CREDITO C
        NOTAS DE CREDITO E
        ANULACIONES
        DEVOLUCIONES
        TRASLADOS
        */
        
        //para calcular el id de anulacion
        AnulacionComprobanteProductor anulacion = new AnulacionComprobanteProductor();
        codigoAnulacion = anulacion.mostrarIdAnulacionComprobante()+1;
        
        LocalDate fecha = LocalDate.now();
        fechaAnulacion = Date.valueOf(fecha);
        
        lNumeroAnulacion.setText(String.valueOf(codigoAnulacion));
        lFechaComprobanteAnulado.setText(String.valueOf(fechaComprobanteAnulado));
        lFechaAnulacion.setText(String.valueOf(LocalDate.now()));
        lComprobanteAnulado.setText(tipoComprobanteAnulado);
        lNumeroComprobanteAnulado.setText(numeroComprobanteAnulado);
        
        //estos dos datos a continuacion van a depender del tipo de comprobante que se este anulando
        lImporteDineroAnulado.setText(String.valueOf(importeDineroAnulado));
        lCantidadMielAnulada.setText(String.valueOf(cantidadMielAnulada));
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSPanelShadow1 = new rojeru_san.RSPanelShadow();
        jPanel1 = new javax.swing.JPanel();
        rSPanelShadow2 = new rojeru_san.RSPanelShadow();
        jLabel2 = new javax.swing.JLabel();
        rsbrAceptar = new rojeru_san.RSButtonRiple();
        ll = new javax.swing.JLabel();
        lFechaComprobanteAnulado = new javax.swing.JLabel();
        lImporte = new javax.swing.JLabel();
        lNumeroAnulacion = new javax.swing.JLabel();
        lTipoComprobanteAnulado = new javax.swing.JLabel();
        lComprobanteAnulado = new javax.swing.JLabel();
        lSaldo = new javax.swing.JLabel();
        lNumeroComprobanteAnulado = new javax.swing.JLabel();
        lPrecioKG = new javax.swing.JLabel();
        lFechaAnulacion = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        lSaldo1 = new javax.swing.JLabel();
        lImporteDineroAnulado = new javax.swing.JLabel();
        lSaldo2 = new javax.swing.JLabel();
        lCantidadMielAnulada = new javax.swing.JLabel();
        lSaldo3 = new javax.swing.JLabel();
        tfObservacion = new javax.swing.JTextField();
        rsbrCancelar = new rojeru_san.RSButtonRiple();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(true);
        setTitle("REGISTRO DE ANULACION DE COMPROBANTE - CAM HONEY BROTHERS");
        setPreferredSize(new java.awt.Dimension(700, 550));

        jPanel1.setBackground(new java.awt.Color(51, 84, 111));

        rSPanelShadow2.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("INFORMACION CORRESPONDIENTE AL COMPROBANTE A ANULAR:");

        rsbrAceptar.setBackground(new java.awt.Color(47, 110, 164));
        rsbrAceptar.setText("REGISTRAR ANULACION");
        rsbrAceptar.setToolTipText("");
        rsbrAceptar.setFont(new java.awt.Font("Roboto Bold", 3, 14)); // NOI18N
        rsbrAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rsbrAceptarActionPerformed(evt);
            }
        });

        ll.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ll.setForeground(new java.awt.Color(255, 255, 255));
        ll.setText("FECHA DEL COMPROBANTE:");

        lFechaComprobanteAnulado.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lFechaComprobanteAnulado.setForeground(new java.awt.Color(255, 255, 255));
        lFechaComprobanteAnulado.setText("-");

        lImporte.setBackground(new java.awt.Color(255, 255, 204));
        lImporte.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lImporte.setForeground(new java.awt.Color(255, 255, 204));
        lImporte.setText("N° ANULACION:");

        lNumeroAnulacion.setBackground(new java.awt.Color(255, 255, 204));
        lNumeroAnulacion.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lNumeroAnulacion.setForeground(new java.awt.Color(255, 255, 204));
        lNumeroAnulacion.setText("-");

        lTipoComprobanteAnulado.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lTipoComprobanteAnulado.setForeground(new java.awt.Color(255, 255, 255));
        lTipoComprobanteAnulado.setText("COMPROBANTE ANULADO:");

        lComprobanteAnulado.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lComprobanteAnulado.setForeground(new java.awt.Color(255, 255, 255));
        lComprobanteAnulado.setText("-");

        lSaldo.setBackground(new java.awt.Color(255, 255, 255));
        lSaldo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lSaldo.setForeground(new java.awt.Color(255, 255, 255));
        lSaldo.setText("N° COMPROBANTE ANULADO:");

        lNumeroComprobanteAnulado.setBackground(new java.awt.Color(255, 255, 255));
        lNumeroComprobanteAnulado.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lNumeroComprobanteAnulado.setForeground(new java.awt.Color(255, 255, 255));
        lNumeroComprobanteAnulado.setText("-");

        lPrecioKG.setBackground(new java.awt.Color(255, 255, 204));
        lPrecioKG.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lPrecioKG.setForeground(new java.awt.Color(255, 255, 204));
        lPrecioKG.setText("FECHA DE ANULACION:");

        lFechaAnulacion.setBackground(new java.awt.Color(255, 255, 204));
        lFechaAnulacion.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lFechaAnulacion.setForeground(new java.awt.Color(255, 255, 204));
        lFechaAnulacion.setText("-");

        lSaldo1.setBackground(new java.awt.Color(255, 255, 255));
        lSaldo1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lSaldo1.setForeground(new java.awt.Color(255, 255, 255));
        lSaldo1.setText("IMPORTE EN DINERO ANULADO:");

        lImporteDineroAnulado.setBackground(new java.awt.Color(255, 255, 255));
        lImporteDineroAnulado.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lImporteDineroAnulado.setForeground(new java.awt.Color(255, 255, 255));
        lImporteDineroAnulado.setText("-");

        lSaldo2.setBackground(new java.awt.Color(255, 255, 255));
        lSaldo2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lSaldo2.setForeground(new java.awt.Color(255, 255, 255));
        lSaldo2.setText("CANTIDAD DE MIEL ANULADA:");

        lCantidadMielAnulada.setBackground(new java.awt.Color(255, 255, 255));
        lCantidadMielAnulada.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lCantidadMielAnulada.setForeground(new java.awt.Color(255, 255, 255));
        lCantidadMielAnulada.setText("-");

        lSaldo3.setBackground(new java.awt.Color(255, 255, 255));
        lSaldo3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lSaldo3.setForeground(new java.awt.Color(255, 255, 204));
        lSaldo3.setText("* OBSERVACION:");

        tfObservacion.setBackground(new java.awt.Color(51, 84, 111));
        tfObservacion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tfObservacion.setForeground(new java.awt.Color(255, 255, 255));
        tfObservacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfObservacionKeyPressed(evt);
            }
        });

        rsbrCancelar.setBackground(new java.awt.Color(47, 110, 164));
        rsbrCancelar.setText("CANCELAR");
        rsbrCancelar.setFont(new java.awt.Font("Roboto Bold", 3, 14)); // NOI18N
        rsbrCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rsbrCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rSPanelShadow2Layout = new javax.swing.GroupLayout(rSPanelShadow2);
        rSPanelShadow2.setLayout(rSPanelShadow2Layout);
        rSPanelShadow2Layout.setHorizontalGroup(
            rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                        .addGap(35, 35, 35))
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfObservacion)
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                        .addComponent(lTipoComprobanteAnulado)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lComprobanteAnulado))
                                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                        .addComponent(lSaldo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lNumeroComprobanteAnulado))
                                    .addComponent(lSaldo3))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addComponent(rsbrAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rsbrCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rSPanelShadow2Layout.createSequentialGroup()
                        .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addComponent(lSaldo1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lImporteDineroAnulado))
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addComponent(lSaldo2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lCantidadMielAnulada)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                        .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addComponent(ll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lFechaComprobanteAnulado))
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addComponent(lPrecioKG)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lFechaAnulacion))
                            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                                .addComponent(lImporte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lNumeroAnulacion)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        rSPanelShadow2Layout.setVerticalGroup(
            rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(42, 42, 42)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ll)
                    .addComponent(lFechaComprobanteAnulado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTipoComprobanteAnulado)
                    .addComponent(lComprobanteAnulado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lNumeroComprobanteAnulado)
                    .addComponent(lSaldo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lImporteDineroAnulado)
                    .addComponent(lSaldo1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCantidadMielAnulada)
                    .addComponent(lSaldo2))
                .addGap(30, 30, 30)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lPrecioKG)
                    .addComponent(lFechaAnulacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lImporte)
                    .addComponent(lNumeroAnulacion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lSaldo3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfObservacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rsbrAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rsbrCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(rSPanelShadow2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rSPanelShadow2Layout.createSequentialGroup()
                    .addGap(49, 49, 49)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(451, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelShadow2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelShadow2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rsbrAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rsbrAceptarActionPerformed

        boolean datosIncompletos = tfObservacion.getText().length() == 0;
        
        if (datosIncompletos){
            
            JOptionPane.showMessageDialog(null, "Debe ingresar una observacion relacionada a la anulacion del comprobante.", "ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
        
        }
        else{
            
            //con todos los chequeos ya realizados se procede al registro de la anulacion
            //al anular ciertos comprobantes, hay que restablecer importes de dinero y cantidades de miel
            //en las ctas. ctes. correspondientes y en el stock de miel
            
            /*
            ***COMPROBANTES DE INGRESO DE MIEL AL SISTEMA***
            FACTURAS A DE PRODUCTORES
            FACTURAS C DE PRODUCTORES
            PRESUPUESTOS DE PRODUCTORES
            CONSIGNACIONES CON PRODUCTORES
            INGRESOS DE MIEL PROPIA
            FACTURACIONES DE CONSIGNACIONES CON PRODUCTORES*/

            /****COMPROBANTES DE EGRESO DE MIEL DEL SISTEMA
            FACTURAS A A EXPORTADORES INTERNOS
            FACTURAS C A EXPORTADORES INTERNOS
            PRESUPUESTOS A EXPORTADORES INTERNOS
            FACTURAS E A CLIENTES EN EL EXTERIOR
            DEVOLUCIONES DE CONSIGNACIONES CON PRODUCTORES*/

            FacturaProductor facturaProductor = new FacturaProductor();
            FacturaCliente facturaCliente = new FacturaCliente();
            PresupuestoProductor presupuestoProductor = new PresupuestoProductor();
            PresupuestoCliente presupuestoCliente = new PresupuestoCliente();
            CreditoProductor consignacion = new CreditoProductor();
            IngresoMielPropia ingreso = new IngresoMielPropia();

            /****COMPROBANTES DE ACREDITACIONES DE PAGOS EN CTAS. CTES. CON PRODUCTORES Y DE CLIENTES
            PAGOS A PRODUCTORES
            PAGOS DE CLIENTES
            NOTAS DE CREDITO A
            NOTAS DE CREDITO C
            NOTAS DE CREDITO E
            CREDITOS DE PRESUPUESTOS*/

            PagoProductor pagoProductor = new PagoProductor();
            PagoCliente pagoCliente = new PagoCliente();
            NotaCreditoProductor notaCreditoProductor = new NotaCreditoProductor();
            NotaCreditoCliente notaCreditoCliente = new NotaCreditoCliente();
            CreditoPresupuestoProductor creditoPresupuestoProductor = new CreditoPresupuestoProductor();
            CreditoPresupuestoCliente creditoPresupuestoCliente = new CreditoPresupuestoCliente();
            
            /****COMPROBANTES QUE NO SE PERMITE ANULAR!
            ANULACIONES
            TRASLADOS
            */
           
            ComprobantesAcreditacionComprobantesAfectadosProductor relacionAcreditacion = new ComprobantesAcreditacionComprobantesAfectadosProductor();
            ComprobantesRelacionadosCompraConsignacion relacionFacturacion = new ComprobantesRelacionadosCompraConsignacion();
            CtaCteProductor ctacteProductor = new CtaCteProductor();
            AnulacionComprobanteProductor anulacion = new AnulacionComprobanteProductor();
            StockRealMiel stockMiel = new StockRealMiel();
            
            //para usar en los casos en que hay que reponer miel impaga por comprobante de facturacion anulado
            Double cantidadMielAnuladaReponerStockImpago = 0.00;
            //para poder anular el movimiento de stock correspondiente, cuando es una compra o cuando es una facturacion
            //de una compra en consignacion!
            String tipoComprobante = "COMPRA";
            String comprobanteAsociado = "";

            //CUANDO SE ANULA UN COMPROBANTE DE COMPRA: los cuales son factura a, factura c, presupuesto y consignacion,
            //SE DEBE VERIFICAR DE ALGUNA MANERA SI EL MISMO ES UNA FACTURACION
            //ORIGINADA DESDE UNA CONSIGNACION. SI NO ES UNA FACTURACION LO UNICO QUE SE HACE ES ANULAR EL COMPROBANTE,
            //LO CUAL HARA QUE LA EXISTENCIA DE DICHO COMPROBANTE NO SUME NI DEUDA EN DINERO NI MIEL PAGA AL STOCK.
            //CASO CONTRARIO: SI EL COMPROBANTE DE COMPRA ES UNA FACTURACION ORIGINADA DESDE UNA CONSIGNACION, ADEMAS DE SU ANULACION
            //LA CUAL IMPLICA NO SUMAR LOS KGS. FACTURADOS AL STOCK DE MIEL PAGO, TAMBIEN
            //SE DEBEN RESTABLECER LOS KGS. DE MIEL FACTURADOS A LA COMPRA EN CONSIGNACION CORRESPONDIENTE, RESTABLECIENDO
            //ASI LOS KGS. DE MIEL IMPAGOS AL STOCK DE MIEL IMPAGO
            
            switch (tipoComprobanteAnulado){
                
                case "FACTURA A":
                    
                    //se distinque entre facturas A de productores de facturas A a exportadores internos
                    if (bandera.equals("PRODUCTOR")){
                        
                        //factura A de productor
                        //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                        //cargarlo en la cta. cte. con el productor
                        //editar el estado de la factura a ANULADO
                        //y ademas debe restablecerse la cantidad de miel PAGA que habia ingresado al sistema
                        //con el registro de la factura que se esta anulando! (lo cual ya esta chequeado
                        //y no descompensara el stock en la locacion involucrada)
                        //en caso de tratarse de una facturacion originada en una consignacion
                        //tambien debe editarse el estado de la consignacion a PENDIENTE (por si la facturacion la habia
                        //colocado en el estado CANCELADO)
                        
                        //1) se genera y registra el comprobante de anulacion
                        anulacion.setFecha_anulacion(fechaAnulacion);
                        anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                        anulacion.setTipo_comprobante_anulado("FACTURA A");
                        anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                        anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                        anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                        anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                        anulacion.setObservacion(tfObservacion.getText());
                        
                        if (anulacion.registrarAnulacionComprobante(anulacion)){

                            //2) Se guarda el movimiento correspondiente a la anulacion,
                            //en la cta. cte. de la empresa con el productor
                            
                            ctacteProductor.setCodigoProductor(codigoProductor);
                            codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                            ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                            ctacteProductor.setFechaMovimiento(fechaAnulacion);
                            ctacteProductor.setDescripcionMovimiento("ANULACION");
                            ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                            ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                            ctacteProductor.setComprobanteAfectado("F. A N° "+numeroComprobanteAnulado);
                            ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                            ctacteProductor.setDebe(importeDineroAnulado);
                            ctacteProductor.setHaber(0.00);
                            ctacteProductor.setSaldo(0.00);
                            ctacteProductor.setEstadoMovimiento("CANCELADO");
                            ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);
                           
                            //SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                            codigoMovimientoCtaCteComprobanteAfectado = facturaProductor.mostrarCodigoMovimientoEnCtaCteFacturaProductor("FACTURA A", codigoComprobanteAnulado);
                            ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);
                            
                            //EN CASO DE QUE LA FACTURA A SEA UN COMPROBANTE DE FACTURACION DE UNA COMPRA EN CONSIGNACION
                            //SE RESTABLECEN LOS KGS. DE MIEL ANULADOS EN LA FACTURA A LA CONSIGNACION CORRESPONDIENTE!
                            //EN REALIDAD SE TILDA COMO ANULADA LA RELACION ENTRE EL COMPROBANTE DE FACTURACION QUE SE ESTA ANULANDO
                            //Y LA COMPRA EN CONSIGNACION RELACIONADA AL MISMO, LO CUAL HACE QUE DICHA RELACION NO RESTE MIEL A LA COMPRA
                            //EN CONSIGNACION
                            //esta faltando colocar el estado de la consignacion en PENDIENTE (para que pueda ser afectada
                            //por nuevas facturaciones y/o devoluciones
                            int codigoConsignacionFacturadaComprobanteAnulado = consignacion.mostrarCodigoConsignacionFacturadaEnComprobante(codigoComprobanteAnulado, "FACTURA A");
                            if (codigoConsignacionFacturadaComprobanteAnulado != 0){
                                
                                //significa que la factura que se esta anulando ES UNA FACTURACION de una consignacion
                                //SE DEBE ANULAR LA RELACION ENTRE LA FACTURA Y LA CONSIGNACION tambien
                                relacionFacturacion.actualizarEstadoRelacionConsignacionComprobanteFacturacion("FACTURA A", codigoComprobanteAnulado);
                                //tambien debe restablecerse el estado de la consignacion correspondiente a PENDIENTE
                                int compraConsignacion = relacionFacturacion.mostrarCodigoConsignacionAfectadaPorFactura(codigoComprobanteAnulado);
                                int codigoMovimientoCompraConsignacionFacturada = consignacion.mostrarCodigoMovimientoEnCtaCteConsignacionProductor(compraConsignacion);
                                ctacteProductor.actualizarEstadoConsignacionPorFacturacionAnulada(codigoMovimientoCompraConsignacionFacturada, codigoProductor);
                                cantidadMielAnuladaReponerStockImpago = cantidadMielAnulada;
                                //NUEVA CORRECCION: no se cargaria el movimiento ANULACION en la tabla de stock de miel
                                //sino que se marcaria como anulado el movimiento en cuestion, en este caso una factura a
                                //la cual, al tener el estado ANULADO no deberia sumar ni restar miel al stock de la locacion
                                //correspondiente y al stock global de la empresa
                                stockMiel.actualizarEstadoMovimientoStock("AUMENTO DE STOCK PAGO POR FACTURACION", "FACT. A / CONSIG.", codigoComprobanteAnulado);
                                stockMiel.actualizarEstadoMovimientoStock("DESCUENTO DE STOCK IMPAGO POR FACTURACION", "FACT. A / CONSIG.", codigoComprobanteAnulado);

                            }
                            else{
                                
                                stockMiel.actualizarEstadoMovimientoStock("COMPRA", "FACTURA A", codigoComprobanteAnulado);
                                
                            }
                                
                            //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                            //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                            AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                            Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion) - cantidadMielAnulada;
                            Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion) + cantidadMielAnuladaReponerStockImpago;
                            Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                            ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                            ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                            ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                            ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);
                            
                            JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();

                        }
                        else{

                            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                        }

                        this.dispose();

                        
                        
                    }
                    else{
                        
                        //factura A a exportador interno
                        
                    }
                    
                    break;
                    
                case "FACTURA C":
                    
                    //se distinque entre facturas C de productores de facturas C a exportadores internos
                    if (bandera.equals("PRODUCTOR")){
                        
                        //factura C de productor
                        //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                        //cargarlo en la cta. cte. con el productor
                        //y ademas debe restablecerse la cantidad de miel PAGA que habia ingresado al sistema
                        //con el registro de la factura que se esta anulando! (lo cual ya esta chequeado
                        //y no descompensara el stock en la locacion involucrada)
                        //en caso de tratarse de una facturacion originada en una consignacion
                        //tambien debe editarse el estado de la consignacion a PENDIENTE (por si la facturacion la habia
                        //colocado en el estado CANCELADO)
                        
                        //1) se genera y registra el comprobante de anulacion
                        anulacion.setFecha_anulacion(fechaAnulacion);
                        anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                        anulacion.setTipo_comprobante_anulado("FACTURA C");
                        anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                        anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                        anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                        anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                        anulacion.setObservacion(tfObservacion.getText());
                        
                        if (anulacion.registrarAnulacionComprobante(anulacion)){

                            //2) Se guarda el movimiento correspondiente a la anulacion,
                            //en la cta. cte. de la empresa con el productor
                            
                            ctacteProductor.setCodigoProductor(codigoProductor);
                            codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                            ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                            ctacteProductor.setFechaMovimiento(fechaAnulacion);
                            ctacteProductor.setDescripcionMovimiento("ANULACION");
                            ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                            ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                            ctacteProductor.setComprobanteAfectado("F. C N° "+numeroComprobanteAnulado);
                            ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                            ctacteProductor.setDebe(importeDineroAnulado);
                            ctacteProductor.setHaber(0.00);
                            ctacteProductor.setSaldo(0.00);
                            ctacteProductor.setEstadoMovimiento("CANCELADO");
                            ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);
                            
                            //SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                            codigoMovimientoCtaCteComprobanteAfectado = facturaProductor.mostrarCodigoMovimientoEnCtaCteFacturaProductor("FACTURA C", codigoComprobanteAnulado);
                            ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);

                            //EN CASO DE QUE LA FACTURA A SEA UN COMPROBANTE DE FACTURACION DE UNA COMPRA EN CONSIGNACION
                            //SE RESTABLECEN LOS KGS. DE MIEL ANULADOS EN LA FACTURA A LA CONSIGNACION CORRESPONDIENTE!
                            //EN REALIDAD SE TILDA COMO ANULADA LA RELACION ENTRE EL COMPROBANTE DE FACTURACION QUE SE ESTA ANULANDO
                            //Y LA COMPRA EN CONSIGNACION RELACIONADA AL MISMO, LO CUAL HACE QUE DICHA RELACION NO RESTE MIEL A LA COMPRA
                            //EN CONSIGNACION
                            int codigoConsignacionFacturadaComprobanteAnulado = consignacion.mostrarCodigoConsignacionFacturadaEnComprobante(codigoComprobanteAnulado, "FACTURA C");
                            if (codigoConsignacionFacturadaComprobanteAnulado != 0){
                                
                                //significa que la factura que se esta anulando ES UNA FACTURACION de una consignacion
                                //SE DEBE ANULAR LA RELACION ENTRE LA FACTURA Y LA CONSIGNACION
                                relacionFacturacion.actualizarEstadoRelacionConsignacionComprobanteFacturacion("FACTURA C", codigoComprobanteAnulado);
                                //tambien debe restablecerse el estado de la consignacion correspondiente a PENDIENTE
                                int compraConsignacion = relacionFacturacion.mostrarCodigoConsignacionAfectadaPorFactura(codigoComprobanteAnulado);
                                int codigoMovimientoCompraConsignacionFacturada = consignacion.mostrarCodigoMovimientoEnCtaCteConsignacionProductor(compraConsignacion);
                                ctacteProductor.actualizarEstadoConsignacionPorFacturacionAnulada(codigoMovimientoCompraConsignacionFacturada, codigoProductor);
                                cantidadMielAnuladaReponerStockImpago = cantidadMielAnulada;
                                //NUEVA CORRECCION: no se cargaria el movimiento ANULACION en la tabla de stock de miel
                                //sino que se marcaria como anulado el movimiento en cuestion, en este caso una factura a
                                //la cual, al tener el estado ANULADO no deberia sumar ni restar miel al stock de la locacion
                                //correspondiente y al stock global de la empresa
                                stockMiel.actualizarEstadoMovimientoStock("AUMENTO DE STOCK PAGO POR FACTURACION", "FACT. C / CONSIG.", codigoComprobanteAnulado);
                                stockMiel.actualizarEstadoMovimientoStock("DESCUENTO DE STOCK IMPAGO POR FACTURACION", "FACT. C / CONSIG.", codigoComprobanteAnulado);

                            }
                            else{
                                
                                stockMiel.actualizarEstadoMovimientoStock("COMPRA", "FACTURA C", codigoComprobanteAnulado);
                                
                            }
                                
                            
                            //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                            //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                            AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                            Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion) - cantidadMielAnulada;
                            Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion) + cantidadMielAnuladaReponerStockImpago;
                            Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                            ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                            ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                            ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                            ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);

                            JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();

                        }
                        else{

                            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                        }

                        this.dispose();

                        
                        
                    }
                    else{
                        
                        //factura C a exportador interno
                        
                    }
                    
                    break;
                    
                case "PRESUPUESTO":
                    
                    //se distinque entre presupuestos de productores de presupuestos a exportadores internos
                    if (bandera.equals("PRODUCTOR")){
                        
                        //presupuesto de productor
                        //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                        //cargarlo en la cta. cte. con el productor
                        //y ademas debe restablecerse la cantidad de miel PAGA que habia ingresado al sistema
                        //con el registro del presupuesto que se esta anulando! (lo cual ya esta chequeado
                        //y no descompensara el stock en la locacion involucrada)
                        //en caso de tratarse de una facturacion originada en una consignacion
                        //tambien debe editarse el estado de la consignacion a PENDIENTE (por si la facturacion la habia
                        //colocado en el estado CANCELADO)
                        
                        //1) se genera y registra el comprobante de anulacion
                        anulacion.setFecha_anulacion(fechaAnulacion);
                        anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                        anulacion.setTipo_comprobante_anulado("PRESUPUESTO");
                        anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                        anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                        anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                        anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                        anulacion.setObservacion(tfObservacion.getText());
                        
                        if (anulacion.registrarAnulacionComprobante(anulacion)){

                            //2) Se guarda el movimiento correspondiente a la anulacion,
                            //en la cta. cte. de la empresa con el productor
                            
                            ctacteProductor.setCodigoProductor(codigoProductor);
                            codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                            ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                            ctacteProductor.setFechaMovimiento(fechaAnulacion);
                            ctacteProductor.setDescripcionMovimiento("ANULACION");
                            ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                            ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                            ctacteProductor.setComprobanteAfectado("PRES. N° "+numeroComprobanteAnulado);
                            ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                            ctacteProductor.setDebe(importeDineroAnulado);
                            ctacteProductor.setHaber(0.00);
                            ctacteProductor.setSaldo(0.00);
                            ctacteProductor.setEstadoMovimiento("CANCELADO");
                            ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);
                            
                            //SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                            codigoMovimientoCtaCteComprobanteAfectado = presupuestoProductor.mostrarCodigoMovimientoEnCtaCtePresupuestoProductor(codigoComprobanteAnulado);
                            ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);

                            //EN CASO DE QUE LA FACTURA A SEA UN COMPROBANTE DE FACTURACION DE UNA COMPRA EN CONSIGNACION
                            //SE RESTABLECEN LOS KGS. DE MIEL ANULADOS EN LA FACTURA A LA CONSIGNACION CORRESPONDIENTE!
                            //EN REALIDAD SE TILDA COMO ANULADA LA RELACION ENTRE EL COMPROBANTE DE FACTURACION QUE SE ESTA ANULANDO
                            //Y LA COMPRA EN CONSIGNACION RELACIONADA AL MISMO, LO CUAL HACE QUE DICHA RELACION NO RESTE MIEL A LA COMPRA
                            //EN CONSIGNACION
                            int codigoConsignacionFacturadaComprobanteAnulado = consignacion.mostrarCodigoConsignacionFacturadaEnComprobante(codigoComprobanteAnulado, "PRESUPUESTO");
                            if (codigoConsignacionFacturadaComprobanteAnulado != 0){
                                
                                //significa que la factura que se esta anulando ES UNA FACTURACION de una consignacion
                                //SE DEBE ANULAR LA RELACION ENTRE LA FACTURA Y LA CONSIGNACION
                                relacionFacturacion.actualizarEstadoRelacionConsignacionComprobanteFacturacion("PRESUPUESTO", codigoComprobanteAnulado);
                                //tambien debe restablecerse el estado de la consignacion correspondiente a PENDIENTE
                                int compraConsignacion = relacionFacturacion.mostrarCodigoConsignacionAfectadaPorPresupuesto(codigoComprobanteAnulado);
                                int codigoMovimientoCompraConsignacionFacturada = consignacion.mostrarCodigoMovimientoEnCtaCteConsignacionProductor(compraConsignacion);
                                ctacteProductor.actualizarEstadoConsignacionPorFacturacionAnulada(codigoMovimientoCompraConsignacionFacturada, codigoProductor);
                                cantidadMielAnuladaReponerStockImpago = cantidadMielAnulada;
                                //NUEVA CORRECCION: no se cargaria el movimiento ANULACION en la tabla de stock de miel
                                //sino que se marcaria como anulado el movimiento en cuestion, en este caso una factura a
                                //la cual, al tener el estado ANULADO no deberia sumar ni restar miel al stock de la locacion
                                //correspondiente y al stock global de la empresa
                                stockMiel.actualizarEstadoMovimientoStock("AUMENTO DE STOCK PAGO POR FACTURACION", "PRESUP. / CONSIG.", codigoComprobanteAnulado);
                                stockMiel.actualizarEstadoMovimientoStock("DESCUENTO DE STOCK IMPAGO POR FACTURACION", "PRESUP. / CONSIG.", codigoComprobanteAnulado);

                            }
                            else{
                                
                                stockMiel.actualizarEstadoMovimientoStock("COMPRA", "PRESUPUESTO", codigoComprobanteAnulado);
                                
                            }
                            
                            //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                            //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                            AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                            Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion) - cantidadMielAnulada;
                            Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion) + cantidadMielAnuladaReponerStockImpago;
                            Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                            ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                            ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                            ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                            ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);

                            JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();

                        }
                        else{

                            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                        }

                        this.dispose();

                        
                        
                    }
                    else{
                        
                        //presupuesto a exportador interno
                        
                    }
                    
                    break;
                    
                case "CONSIGNACION":
                    
                    //NO HACE FALTA DISTINGUIR ENTRE PRODUCTORES Y CLIENTES
                    //consignacion
                    //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                    //cargarlo en la cta. cte. con el productor
                    //y ademas debe restablecerse la cantidad de miel IMPAGA que habia ingresado al sistema
                    //con el registro de la consignacion que se esta anulando! (lo cual ya esta chequeado
                    //y no descompensara el stock en la locacion involucrada)

                    //1) se genera y registra el comprobante de anulacion
                    anulacion.setFecha_anulacion(fechaAnulacion);
                    anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                    anulacion.setTipo_comprobante_anulado("CONSIGNACION");
                    anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                    anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                    anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                    anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                    anulacion.setObservacion(tfObservacion.getText());

                    if (anulacion.registrarAnulacionComprobante(anulacion)){

                        //2) Se guarda el movimiento correspondiente a la anulacion,
                        //en la cta. cte. de la empresa con el productor

                        ctacteProductor.setCodigoProductor(codigoProductor);
                        codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                        ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                        ctacteProductor.setFechaMovimiento(fechaAnulacion);
                        ctacteProductor.setDescripcionMovimiento("ANULACION");
                        ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                        ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                        ctacteProductor.setComprobanteAfectado("CONSIG. N° "+numeroComprobanteAnulado);
                        ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                        ctacteProductor.setDebe(0.00);
                        ctacteProductor.setHaber(0.00);
                        ctacteProductor.setSaldo(0.00);
                        ctacteProductor.setEstadoMovimiento("CANCELADO");
                        ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);

                        //SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                        codigoMovimientoCtaCteComprobanteAfectado = consignacion.mostrarCodigoMovimientoEnCtaCteConsignacionProductor(codigoComprobanteAnulado);
                        ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);

                        stockMiel.actualizarEstadoMovimientoStock("COMPRA", "CONSIGNACION", codigoComprobanteAnulado);

                        //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                        //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                        AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                        Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion);
                        Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion) - cantidadMielAnulada;
                        Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                        ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                        ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                        ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                        ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);

                        JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();

                    }
                    else{

                        JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                    }

                    this.dispose();

                    break;
                    
                case "INGRESO":
                    
                    //NO HACE FALTA DISTINGUIR ENTRE PRODUCTORES Y CLIENTES
                    //ingreso de miel propia
                    //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                    //y ademas debe restablecerse la cantidad de miel que habia ingresado al sistema
                    //con el registro del ingreso de miel que se esta anulando! (lo cual ya esta chequeado
                    //y no descompensara el stock en la locacion involucrada)

                    //1) se genera y registra el comprobante de anulacion
                    anulacion.setFecha_anulacion(fechaAnulacion);
                    anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                    anulacion.setTipo_comprobante_anulado("INGRESO");
                    anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                    anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                    anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                    anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                    anulacion.setObservacion(tfObservacion.getText());

                    if (anulacion.registrarAnulacionComprobante(anulacion)){
                        
                        stockMiel.actualizarEstadoMovimientoStock("INGRESO", "INGRESO", codigoComprobanteAnulado);

                        //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                        //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                        AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                        Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion) - cantidadMielAnulada;
                        Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion);
                        Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                        ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                        ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                        ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                        ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);

                        JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();

                    }
                    else{

                        JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                    }

                    this.dispose();

                    break;
                    
                default: 
                    
                    break;
            
                case "PAGO":
                    
                    //se distingue entre pagos a productores y pagos de clientes
                    if (bandera.equals("PRODUCTOR")){
                        
                        //pago a productor
                        //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                        //cargarlo en la cta. cte. con el productor
                        //y ademas debe restablecerse importe de dinero pagado en el comprobante correspondiente
                        //no debe chequearse descompensacion de stock de miel ya que es un pago (solo afecta dinero)
                        
                        //1) se genera y registra el comprobante de anulacion
                        anulacion.setFecha_anulacion(fechaAnulacion);
                        anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                        anulacion.setTipo_comprobante_anulado("PAGO");
                        anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                        anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                        anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                        anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                        anulacion.setObservacion(tfObservacion.getText());
                        
                        if (anulacion.registrarAnulacionComprobante(anulacion)){

                            //2) Se guarda el movimiento correspondiente a la anulacion,
                            //en la cta. cte. de la empresa con el productor
                            
                            ctacteProductor.setCodigoProductor(codigoProductor);
                            codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                            ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                            ctacteProductor.setFechaMovimiento(fechaAnulacion);
                            ctacteProductor.setDescripcionMovimiento("ANULACION");
                            ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                            ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                            ctacteProductor.setComprobanteAfectado("PAGO N° "+numeroComprobanteAnulado);
                            ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                            ctacteProductor.setDebe(importeDineroAnulado);
                            ctacteProductor.setHaber(0.00);
                            ctacteProductor.setSaldo(0.00);
                            ctacteProductor.setEstadoMovimiento("CANCELADO");
                            ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);
                            
                            //3) se modifica el saldo del comprobante afectado por el pago, ya que debe restablecerse el importe
                            //pagado en el mismo, el cual ahora se esta anulando
                            
                            //se obtienen el tipo y el codigo del comprobante afectado por el pago!!
                            String tipoComprobanteAfectadoPago = pagoProductor.mostrarTipoComprobanteAfectadoPago(codigoComprobanteAnulado);
                            //codigo del comprobante afectado por el pago
                            int comprobanteAfectadoPago = pagoProductor.mostrarCodigoComprobanteAfectadoPago(codigoComprobanteAnulado);
                            //debe y haber del comprobante afectado por el pago
                            double debeComprobante = 0.00;
                            double haberComprobante = 0.00;
                            if (tipoComprobanteAfectadoPago.equals("PRESUPUESTO")){

                                //es un pago de un presupuesto
                                debeComprobante = presupuestoProductor.mostrarImportePresupuesto(comprobanteAfectadoPago);
                                haberComprobante = presupuestoProductor.mostrarImportePagoPresupuesto(comprobanteAfectadoPago);
                                codigoMovimientoCtaCteComprobanteAfectadoCredito = presupuestoProductor.mostrarCodigoMovimientoEnCtaCtePresupuestoProductor(comprobanteAfectadoPago);


                            }
                            else{

                                if (tipoComprobanteAfectadoPago.equals("FACTURA A")){

                                    //es un pago de una factura A
                                    debeComprobante = facturaProductor.mostrarImporteFactura(comprobanteAfectadoPago);
                                    haberComprobante = facturaProductor.mostrarImportePagoFactura("FACTURA A",comprobanteAfectadoPago);
                                    codigoMovimientoCtaCteComprobanteAfectadoCredito = facturaProductor.mostrarCodigoMovimientoEnCtaCteFacturaProductor(tipoComprobanteAfectadoPago, comprobanteAfectadoPago);

                                }
                                else{

                                    //es un pago de una factura C
                                    debeComprobante = facturaProductor.mostrarImporteFactura(comprobanteAfectadoPago);
                                    haberComprobante = facturaProductor.mostrarImportePagoFactura("FACTURA C",comprobanteAfectadoPago);
                                    codigoMovimientoCtaCteComprobanteAfectadoCredito = facturaProductor.mostrarCodigoMovimientoEnCtaCteFacturaProductor(tipoComprobanteAfectadoPago, comprobanteAfectadoPago);

                                }
                                
                            }
                            
                            //YA SE TIENEN LOS DATOS DEL DEBE, HABER Y PAGO EFECTUADO SOBRE DEL Y SOBRE EL COMPROBANTE AFECTADO
                            ctacteProductor.actualizarSaldoComprobanteProductorPorPagoAnulado(codigoMovimientoCtaCteComprobanteAfectadoCredito, codigoProductor, debeComprobante, importeDineroAnulado, haberComprobante); 
        
                            //4) SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                            
                            codigoMovimientoCtaCteComprobanteAfectado = pagoProductor.mostrarCodigoMovimientoEnCtaCtePagoProductor(codigoComprobanteAnulado);
                            ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);
                            
                            //5) se actualiza el estado de la acreditacion del pago en la tabla de relaciones entre
                            //comprobantes de acreditacion y comprobantes afectados por dichas acreditaciones
                            relacionAcreditacion.actualizarEstadoRelacionComprobanteAcreditacionComprobanteAfectado("PAGO", codigoComprobanteAnulado);
                            
                            //NO SE DEBE ADEMAS ALTERAR EL STOCK DE MIEL, RESTANDO LA CANTIDAD DE KGS. COMPRADA EN ESTA FACTURA
                            //NO SE DEBE ACTUALIZAR LA TABLA PARA AJUSTE Y COMPENSACION DE STOCK DE MIEL

                            JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();

                        }
                        else{

                            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                        }

                        this.dispose();

                        
                        
                    }
                    else{
                        
                        //pago de cliente
                        
                    }
                    
                    break;
                    
                case "NOTA DE CREDITO A":
                    
                    //se distingue entre notas de credito de productores y notas de credito a clientes
                    if (bandera.equals("PRODUCTOR")){
                        
                        //nota de credito de productor
                        //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                        //cargarlo en la cta. cte. con el productor
                        //y ademas debe restablecerse importe de dinero acreditado en el comprobante correspondiente
                        //tambien debe restablecerse en el stock la cantidad de miel devuelta en la nota de credito
                        //no se deberia chequear por la descompensacion de stock ya que al anularse una nota de credito
                        //el stock de miel se incrementa, se restablece la miel que habia sido devuelta en la nc
                        
                        //1) se genera y registra el comprobante de anulacion
                        anulacion.setFecha_anulacion(fechaAnulacion);
                        anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                        anulacion.setTipo_comprobante_anulado("NOTA DE CREDITO A");
                        anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                        anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                        anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                        
                        //en cantidad de miel anulada esta la miel que debe restablecerse al stock de la empresa!!!
                        anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                        anulacion.setObservacion(tfObservacion.getText());
                        
                        if (anulacion.registrarAnulacionComprobante(anulacion)){

                            //2) Se guarda el movimiento correspondiente a la anulacion,
                            //en la cta. cte. de la empresa con el productor
                            
                            ctacteProductor.setCodigoProductor(codigoProductor);
                            codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                            ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                            ctacteProductor.setFechaMovimiento(fechaAnulacion);
                            ctacteProductor.setDescripcionMovimiento("ANULACION");
                            ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                            ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                            ctacteProductor.setComprobanteAfectado("N.C. A N° "+numeroComprobanteAnulado);
                            ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                            ctacteProductor.setDebe(importeDineroAnulado);
                            ctacteProductor.setHaber(0.00);
                            ctacteProductor.setSaldo(0.00);
                            ctacteProductor.setEstadoMovimiento("CANCELADO");
                            ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);
                            
                            //3) se modifica el saldo del comprobante afectado por el pago, ya que debe restablecerse el importe
                            //pagado en el mismo, el cual ahora se esta anulando
                            
                            //se obtienen el tipo y el codigo del comprobante afectado por el pago!!
                            String tipoComprobanteAfectadoNC = "FACTURA A";
                            //codigo del comprobante afectado por el pago
                            int comprobanteAfectadoNC = notaCreditoProductor.mostrarCodigoComprobanteAfectadoNC(codigoComprobanteAnulado);
                            //debe y haber del comprobante afectado por el pago
                            double debeComprobante = 0.00;
                            double haberComprobante = 0.00;
                            //es un nota de credito asociada a una factura A
                            
                            debeComprobante = facturaProductor.mostrarImporteFactura(comprobanteAfectadoNC);
                            haberComprobante = facturaProductor.mostrarImportePagoFactura("FACTURA A",comprobanteAfectadoNC);
                            
                            codigoMovimientoCtaCteComprobanteAfectadoCredito = facturaProductor.mostrarCodigoMovimientoEnCtaCteFacturaProductor(tipoComprobanteAfectadoNC, comprobanteAfectadoNC);
                            
                            //YA SE TIENEN LOS DATOS DEL DEBE, HABER Y PAGO EFECTUADO SOBRE DEL Y SOBRE EL COMPROBANTE AFECTADO
                            ctacteProductor.actualizarSaldoComprobanteProductorPorPagoAnulado(codigoMovimientoCtaCteComprobanteAfectadoCredito, codigoProductor, debeComprobante, importeDineroAnulado, haberComprobante); 
        
                            //4) SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                            
                            codigoMovimientoCtaCteComprobanteAfectado = notaCreditoProductor.mostrarCodigoMovimientoEnCtaCteNotaCreditoProductor(codigoComprobanteAnulado);
                            ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);
                            
                            //5) se actualiza el estado de la acreditacion del pago en la tabla de relaciones entre
                            //comprobantes de acreditacion y comprobantes afectados por dichas acreditaciones
                            relacionAcreditacion.actualizarEstadoRelacionComprobanteAcreditacionComprobanteAfectado("NOTA DE CREDITO A", codigoComprobanteAnulado);
                            
                            //6) NUEVA CORRECCION: no se cargaria el movimiento ANULACION en la tabla de stock de miel
                            //sino que se marcaria como anulado el movimiento en cuestion, en este caso una nota de credito a
                            //la cual, al tener el estado ANULADO no deberia sumar ni restar miel al stock de la locacion
                            //correspondiente y al stock global de la empresa
                            stockMiel.actualizarEstadoMovimientoStock("DEVOLUCION", "NOTA DE CREDITO A", codigoComprobanteAnulado);
                            
                            //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                            //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                            AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                            Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion) + cantidadMielAnulada;
                            Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion);
                            Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                            ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                            ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                            ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                            ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);

                            JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();

                        }
                        else{

                            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                        }

                        this.dispose();

                        
                        
                    }
                    else{
                        
                        //nota de credito a a exportador interno
                        
                    }
                    
                    break;
                    
                case "NOTA DE CREDITO C":
                    
                    //se distingue entre notas de credito de productores y notas de credito a clientes
                    if (bandera.equals("PRODUCTOR")){
                        
                        //nota de credito de productor
                        //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                        //cargarlo en la cta. cte. con el productor
                        //y ademas debe restablecerse importe de dinero acreditado en el comprobante correspondiente
                        //tambien debe restablecerse en el stock la cantidad de miel devuelta en la nota de credito
                        //no se deberia chequear por la descompensacion de stock ya que al anularse una nota de credito
                        //el stock de miel se incrementa, se restablece la miel que habia sido devuelta en la nc
                        
                        //1) se genera y registra el comprobante de anulacion
                        anulacion.setFecha_anulacion(fechaAnulacion);
                        anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                        anulacion.setTipo_comprobante_anulado("NOTA DE CREDITO C");
                        anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                        anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                        anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                        
                        //en cantidad de miel anulada esta la miel que debe restablecerse al stock de la empresa!!!
                        anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                        anulacion.setObservacion(tfObservacion.getText());
                        
                        if (anulacion.registrarAnulacionComprobante(anulacion)){

                            //2) Se guarda el movimiento correspondiente a la anulacion,
                            //en la cta. cte. de la empresa con el productor
                            
                            ctacteProductor.setCodigoProductor(codigoProductor);
                            codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                            ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                            ctacteProductor.setFechaMovimiento(fechaAnulacion);
                            ctacteProductor.setDescripcionMovimiento("ANULACION");
                            ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                            ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                            ctacteProductor.setComprobanteAfectado("N.C. C N° "+numeroComprobanteAnulado);
                            ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                            ctacteProductor.setDebe(importeDineroAnulado);
                            ctacteProductor.setHaber(0.00);
                            ctacteProductor.setSaldo(0.00);
                            ctacteProductor.setEstadoMovimiento("CANCELADO");
                            ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);
                            
                            //3) se modifica el saldo del comprobante afectado por el pago, ya que debe restablecerse el importe
                            //pagado en el mismo, el cual ahora se esta anulando
                            
                            //se obtienen el tipo y el codigo del comprobante afectado por el pago!!
                            String tipoComprobanteAfectadoNC = "FACTURA C";
                            //codigo del comprobante afectado por el pago
                            int comprobanteAfectadoNC = notaCreditoProductor.mostrarCodigoComprobanteAfectadoNC(codigoComprobanteAnulado);
                            //debe y haber del comprobante afectado por el pago
                            double debeComprobante = 0.00;
                            double haberComprobante = 0.00;
                            //es un nota de credito asociada a una factura A
                            
                            debeComprobante = facturaProductor.mostrarImporteFactura(comprobanteAfectadoNC);
                            haberComprobante = facturaProductor.mostrarImportePagoFactura("FACTURA C",comprobanteAfectadoNC);
                            
                            System.out.println(debeComprobante);
                            System.out.println(haberComprobante);
                            codigoMovimientoCtaCteComprobanteAfectadoCredito = facturaProductor.mostrarCodigoMovimientoEnCtaCteFacturaProductor(tipoComprobanteAfectadoNC, comprobanteAfectadoNC);
                            
                            //YA SE TIENEN LOS DATOS DEL DEBE, HABER Y PAGO EFECTUADO SOBRE DEL Y SOBRE EL COMPROBANTE AFECTADO
                            ctacteProductor.actualizarSaldoComprobanteProductorPorPagoAnulado(codigoMovimientoCtaCteComprobanteAfectadoCredito, codigoProductor, debeComprobante, importeDineroAnulado, haberComprobante); 
        
                            //4) SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                            
                            codigoMovimientoCtaCteComprobanteAfectado = notaCreditoProductor.mostrarCodigoMovimientoEnCtaCteNotaCreditoProductor(codigoComprobanteAnulado);
                            ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);
                            
                            //5) se actualiza el estado de la acreditacion del pago en la tabla de relaciones entre
                            //comprobantes de acreditacion y comprobantes afectados por dichas acreditaciones
                            relacionAcreditacion.actualizarEstadoRelacionComprobanteAcreditacionComprobanteAfectado("NOTA DE CREDITO C", codigoComprobanteAnulado);
                            
                            //6) NUEVA CORRECCION: no se cargaria el movimiento ANULACION en la tabla de stock de miel
                            //sino que se marcaria como anulado el movimiento en cuestion, en este caso una nota de credito c
                            //la cual, al tener el estado ANULADO no deberia sumar ni restar miel al stock de la locacion
                            //correspondiente y al stock global de la empresa
                            stockMiel.actualizarEstadoMovimientoStock("DEVOLUCION", "NOTA DE CREDITO C", codigoComprobanteAnulado);
                            
                            //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                            //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                            AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                            Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion) + cantidadMielAnulada;
                            Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion);
                            Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                            ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                            ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                            ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                            ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);

                            JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();

                        }
                        else{

                            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                        }

                        this.dispose();

                        
                        
                    }
                    else{
                        
                        //nota de credito a a exportador interno
                        
                    }
                    
                    break;
                    
                case "NOTA DE CREDITO E":

                    JOptionPane.showMessageDialog(null, "EN DESARROLLO");
                    break;

                case "CREDITO DE PRESUPUESTO":
                    
                    //se distingue entre notas de credito de productores y notas de credito a clientes
                    if (bandera.equals("PRODUCTOR")){
                        
                        //credito de presupuesto de productor
                        //se debe generar el comprobante de anulacion, cargarlo en la tabla de anulaciones
                        //cargarlo en la cta. cte. con el productor
                        //y ademas debe restablecerse importe de dinero acreditado en el comprobante correspondiente
                        //tambien debe restablecerse en el stock la cantidad de miel devuelta en el credito
                        //no se deberia chequear por la descompensacion de stock ya que al anularse un credito de presupuesto
                        //el stock de miel se incrementa, se restablece la miel que habia sido devuelta en la nc
                        
                        //1) se genera y registra el comprobante de anulacion
                        anulacion.setFecha_anulacion(fechaAnulacion);
                        anulacion.setNumero_comprobante(String.valueOf(codigoAnulacion));
                        anulacion.setTipo_comprobante_anulado("CREDITO DE PRESUPUESTO");
                        anulacion.setCodigo_comprobante_anulado(codigoComprobanteAnulado);
                        anulacion.setNumero_comprobante_anulado(numeroComprobanteAnulado);
                        anulacion.setImporte_dinero_anulado(importeDineroAnulado);
                        
                        //en cantidad de miel anulada esta la miel que debe restablecerse al stock de la empresa!!!
                        anulacion.setCantidad_miel_anulada(cantidadMielAnulada);
                        anulacion.setObservacion(tfObservacion.getText());
                        
                        if (anulacion.registrarAnulacionComprobante(anulacion)){

                            //2) Se guarda el movimiento correspondiente a la anulacion,
                            //en la cta. cte. de la empresa con el productor
                            
                            ctacteProductor.setCodigoProductor(codigoProductor);
                            codigoMovimientoCtaCte = ctacteProductor.mostrarIdMovimiento(codigoProductor)+1;
                            ctacteProductor.setCodigoMovimiento(codigoMovimientoCtaCte);
                            ctacteProductor.setFechaMovimiento(fechaAnulacion);
                            ctacteProductor.setDescripcionMovimiento("ANULACION");
                            ctacteProductor.setComprobanteAsociado(codigoAnulacion);
                            ctacteProductor.setNumeroComprobante(String.valueOf(codigoAnulacion));
                            ctacteProductor.setComprobanteAfectado("CRED. PRES. N° "+numeroComprobanteAnulado);
                            ctacteProductor.setCantidadMiel(cantidadMielAnulada);
                            ctacteProductor.setDebe(importeDineroAnulado);
                            ctacteProductor.setHaber(0.00);
                            ctacteProductor.setSaldo(0.00);
                            ctacteProductor.setEstadoMovimiento("CANCELADO");
                            ctacteProductor.registrarMovimientoCtaCteProductor(ctacteProductor);
                            
                            //3) se modifica el saldo del comprobante afectado por el pago, ya que debe restablecerse el importe
                            //pagado en el mismo, el cual ahora se esta anulando
                            
                            //se obtienen el tipo y el codigo del comprobante afectado por el pago!!
                            String tipoComprobanteAfectadoNC = "PRESUPUESTO";
                            //codigo del comprobante afectado por el pago
                            int comprobanteAfectadoNC = creditoPresupuestoProductor.mostrarCodigoComprobanteAfectadoCreditoPresupuesto(codigoComprobanteAnulado);
                            //debe y haber del comprobante afectado por el pago
                            double debeComprobante = 0.00;
                            double haberComprobante = 0.00;
                            //es un nota de credito asociada a una factura A
                            
                            debeComprobante = presupuestoProductor.mostrarImportePresupuesto(comprobanteAfectadoNC);
                            haberComprobante = presupuestoProductor.mostrarImportePagoPresupuesto(comprobanteAfectadoNC);
                            
                            codigoMovimientoCtaCteComprobanteAfectadoCredito = presupuestoProductor.mostrarCodigoMovimientoEnCtaCtePresupuestoProductor(comprobanteAfectadoNC);
                            
                            //YA SE TIENEN LOS DATOS DEL DEBE, HABER Y PAGO EFECTUADO SOBRE DEL Y SOBRE EL COMPROBANTE AFECTADO
                            ctacteProductor.actualizarSaldoComprobanteProductorPorPagoAnulado(codigoMovimientoCtaCteComprobanteAfectadoCredito, codigoProductor, debeComprobante, importeDineroAnulado, haberComprobante); 
        
                            //4) SE ACTUALIZA EL ESTADO DEL COMPROBANTE ANULADO A "ANULADO"
                            
                            codigoMovimientoCtaCteComprobanteAfectado = creditoPresupuestoProductor.mostrarCodigoMovimientoEnCtaCteCreditoPresupuestoProductor(codigoComprobanteAnulado);
                            ctacteProductor.actualizarEstadoComprobanteProductor(codigoMovimientoCtaCteComprobanteAfectado, codigoProductor);
                            
                            //5) se actualiza el estado de la acreditacion del pago en la tabla de relaciones entre
                            //comprobantes de acreditacion y comprobantes afectados por dichas acreditaciones
                            relacionAcreditacion.actualizarEstadoRelacionComprobanteAcreditacionComprobanteAfectado("CREDITO DE PRESUPUESTO", codigoComprobanteAnulado);
                            
                            //6) NUEVA CORRECCION: no se cargaria el movimiento ANULACION en la tabla de stock de miel
                            //sino que se marcaria como anulado el movimiento en cuestion, en este caso un credito de presupuesto
                            //la cual, al tener el estado ANULADO no deberia sumar ni restar miel al stock de la locacion
                            //correspondiente y al stock global de la empresa
                            stockMiel.actualizarEstadoMovimientoStock("DEVOLUCION", "CREDITO DE PRESUPUESTO", codigoComprobanteAnulado);
                            
                            //ANTES DE CERRAR EL FORMULARIO ACTUALIZO LOS VALORES DE MIEL EN LA LOCACION CORRESPONDIENTE
                            //ESTA TABLE SERVIRA SIEMPRE QUE HAYA QUE AJUSTAR Y COMPENSAR EL STOCK DE MIEL PAGO E IMPAGO!
                            AjusteCompensacionStock ajuste = new AjusteCompensacionStock();
                            Double cantidadMielPagaLocacion = ajuste.consultarCantidadMielPagaLocacion(codigoLocacion) + cantidadMielAnulada;
                            Double cantidadMielImpagaLocacion = ajuste.consultarCantidadMielImpagaLocacion(codigoLocacion);
                            Double cantidadMielImpagaVendidadLocacion = ajuste.consultarCantidadMielImpagaVendidaLocacion(codigoLocacion);
                            ajuste.setStock_miel_pago(cantidadMielPagaLocacion);
                            ajuste.setStock_miel_impago(cantidadMielImpagaLocacion);
                            ajuste.setStock_miel_impago_vendido(cantidadMielImpagaVendidadLocacion);
                            ajuste.modificarValoresMielLocacion(ajuste, codigoLocacion);

                            JOptionPane.showMessageDialog(null, "La anulacion del comprobante ha sido registrada exitosamente.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
                            this.dispose();

                        }
                        else{

                            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la anulacion del comprobante.","REGISTRO DE ANULACION DE COMPROBANTE", JOptionPane.ERROR_MESSAGE);

                        }

                        this.dispose();

                        
                        
                    }
                    else{
                        
                        //credito de presupuesto a exportador interno (o cliente)
                        
                    }
                    
                    break;
                    
            }
        
        }
        
    }//GEN-LAST:event_rsbrAceptarActionPerformed

    private void tfObservacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfObservacionKeyPressed
    }//GEN-LAST:event_tfObservacionKeyPressed

    private void rsbrCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rsbrCancelarActionPerformed

        JOptionPane.showMessageDialog(null, "Esta a punto de cerrar el formulario. Se perderan los cambios no guardados.", "ANULACION DE COMPROBANTE", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
        
    }//GEN-LAST:event_rsbrCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator3;
    public static javax.swing.JLabel lCantidadMielAnulada;
    public javax.swing.JLabel lComprobanteAnulado;
    public javax.swing.JLabel lFechaAnulacion;
    public static javax.swing.JLabel lFechaComprobanteAnulado;
    private javax.swing.JLabel lImporte;
    public static javax.swing.JLabel lImporteDineroAnulado;
    public javax.swing.JLabel lNumeroAnulacion;
    public static javax.swing.JLabel lNumeroComprobanteAnulado;
    private javax.swing.JLabel lPrecioKG;
    private javax.swing.JLabel lSaldo;
    private javax.swing.JLabel lSaldo1;
    private javax.swing.JLabel lSaldo2;
    private javax.swing.JLabel lSaldo3;
    private javax.swing.JLabel lTipoComprobanteAnulado;
    private javax.swing.JLabel ll;
    private rojeru_san.RSPanelShadow rSPanelShadow1;
    private rojeru_san.RSPanelShadow rSPanelShadow2;
    private rojeru_san.RSButtonRiple rsbrAceptar;
    private rojeru_san.RSButtonRiple rsbrCancelar;
    public javax.swing.JTextField tfObservacion;
    // End of variables declaration//GEN-END:variables
}
